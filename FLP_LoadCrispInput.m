function [ output ] = FLP_LoadCrispInput( FuzzySet, file_dir )
% FLP_LoadCrispInput Reads Crisp Input from comma delimited text file

%   This function reads in a CSV delimited text file containing the crisp
%   input values and creates a matrix with the values in a column
%   corresponding to the order of the sets in FuzzySet. The first row of
%   the CSV file should contain a header row that matches the name of the
%   sets in the FuzzySet object.
%
% Input
% FuzzySet - a FuzzySet object generated by FLP_LoadFuzzySets
% file_dir - the path and filename of the CSV file
%
% Output
% output -  a CrispInput object
%
% Author: Jim Kunce (jdk_acct@yahoo.com)

% The number of columns for this input is variable based on the number of
% fuzzy sets in the data (N-1 for the output). Create a format string that 
% will read in the set count and create a file format specification
input_spec = '%s';
N = FuzzySet.Count - 1;
for i = 1:N-1
    input_spec = strcat(input_spec,' %s');
end   
 
% read the CSV file
fid = fopen(file_dir);
fid_read = textscan(fid, input_spec, 'delimiter',',');
fclose(fid);
in_ct = size(fid_read{1,1},1)-1; % the number of crisp input values to be read
output = zeros(in_ct,N-1); % pre-allocate the output

for i = 1:N
    find_set_row = find(strcmp(fid_read{1,i}{1,1},FuzzySet.Set)); % find the set number
    if isempty(find_set_row) % if unable to find match return error message
        fprintf('ERROR LOADING CRISP INPUTS: Unable to find matching set for "%s" column\n\n',fid_read{1,i}{1,1});
        output = [];
        return;
    end
    output(1:in_ct,find_set_row) = str2num(char(fid_read{1,i}{2:end,1})); % read the values and place in set number column
end

end

